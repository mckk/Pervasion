package uk.ac.imperial.doc.rest;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SerialMsg'
 * message type.
 */

public class SerialMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 8;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 11;

    /** Create a new SerialMsg of size 8. */
    public SerialMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SerialMsg of the given data_length. */
    public SerialMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg with the given data_length
     * and base offset.
     */
    public SerialMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg using the given byte array
     * as backing store.
     */
    public SerialMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SerialMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SerialMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg embedded in the given message
     * at the given base offset.
     */
    public SerialMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg embedded in the given message
     * at the given base offset and length.
     */
    public SerialMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SerialMsg> \n";
      try {
        s += "  [header=0x"+Long.toHexString(get_header())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [srcid=0x"+Long.toHexString(get_srcid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [temperature=0x"+Long.toHexString(get_temperature())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lux=0x"+Long.toHexString(get_lux())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [fire=0x"+Long.toHexString(get_fire())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: header
    //   Field type: short, signed
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'header' is signed (true).
     */
    public static boolean isSigned_header() {
        return true;
    }

    /**
     * Return whether the field 'header' is an array (false).
     */
    public static boolean isArray_header() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'header'
     */
    public static int offset_header() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'header'
     */
    public static int offsetBits_header() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'header'
     */
    public short get_header() {
        return (short)getUIntBEElement(offsetBits_header(), 8);
    }

    /**
     * Set the value of the field 'header'
     */
    public void set_header(short value) {
        setUIntBEElement(offsetBits_header(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'header'
     */
    public static int size_header() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'header'
     */
    public static int sizeBits_header() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: srcid
    //   Field type: int, signed
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'srcid' is signed (true).
     */
    public static boolean isSigned_srcid() {
        return true;
    }

    /**
     * Return whether the field 'srcid' is an array (false).
     */
    public static boolean isArray_srcid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'srcid'
     */
    public static int offset_srcid() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'srcid'
     */
    public static int offsetBits_srcid() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'srcid'
     */
    public int get_srcid() {
        return (int)getUIntBEElement(offsetBits_srcid(), 16);
    }

    /**
     * Set the value of the field 'srcid'
     */
    public void set_srcid(int value) {
        setUIntBEElement(offsetBits_srcid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'srcid'
     */
    public static int size_srcid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'srcid'
     */
    public static int sizeBits_srcid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temperature
    //   Field type: short, signed
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temperature' is signed (true).
     */
    public static boolean isSigned_temperature() {
        return true;
    }

    /**
     * Return whether the field 'temperature' is an array (false).
     */
    public static boolean isArray_temperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'temperature'
     */
    public static int offset_temperature() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temperature'
     */
    public static int offsetBits_temperature() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'temperature'
     */
    public short get_temperature() {
        return (short)getSIntBEElement(offsetBits_temperature(), 16);
    }

    /**
     * Set the value of the field 'temperature'
     */
    public void set_temperature(short value) {
        setSIntBEElement(offsetBits_temperature(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'temperature'
     */
    public static int size_temperature() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'temperature'
     */
    public static int sizeBits_temperature() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lux
    //   Field type: short, signed
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lux' is signed (true).
     */
    public static boolean isSigned_lux() {
        return true;
    }

    /**
     * Return whether the field 'lux' is an array (false).
     */
    public static boolean isArray_lux() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lux'
     */
    public static int offset_lux() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lux'
     */
    public static int offsetBits_lux() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'lux'
     */
    public short get_lux() {
        return (short)getSIntBEElement(offsetBits_lux(), 16);
    }

    /**
     * Set the value of the field 'lux'
     */
    public void set_lux(short value) {
        setSIntBEElement(offsetBits_lux(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'lux'
     */
    public static int size_lux() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lux'
     */
    public static int sizeBits_lux() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: fire
    //   Field type: byte, signed
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'fire' is signed (true).
     */
    public static boolean isSigned_fire() {
        return true;
    }

    /**
     * Return whether the field 'fire' is an array (false).
     */
    public static boolean isArray_fire() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'fire'
     */
    public static int offset_fire() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'fire'
     */
    public static int offsetBits_fire() {
        return 56;
    }

    /**
     * Return the value (as a byte) of the field 'fire'
     */
    public byte get_fire() {
        return (byte)getSIntBEElement(offsetBits_fire(), 8);
    }

    /**
     * Set the value of the field 'fire'
     */
    public void set_fire(byte value) {
        setSIntBEElement(offsetBits_fire(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'fire'
     */
    public static int size_fire() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'fire'
     */
    public static int sizeBits_fire() {
        return 8;
    }

}
